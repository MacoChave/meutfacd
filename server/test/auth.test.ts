// Generated by CodiumAI

/*
Code Analysis

Objective:
The objective of the loginEstudianteHandler function is to handle the login process for a student user. It receives the user's credentials, validates them, and generates a token if the credentials are correct.

Inputs:
- Request object containing the user's credentials in the body
- Response object to send the response back to the client

Flow:
1. Extract the user's credentials from the request body
2. Search for the user in the database using the carnet
3. If the user is not found, return an error response
4. Compare the user's password with the hashed password in the database
5. If the password is incorrect, return an error response
6. Find the student profile associated with the user
7. If the user is not a student, return an error response
8. Generate a token with the user's carnet and cui
9. Send the token and user information in the response

Outputs:
- Success response with a token and user information
- Error response if the user is not found, password is incorrect, or user is not a student

Additional aspects:
- The function uses external functions and models to handle password comparison, token generation, and user search
- The function uses try-catch blocks to handle errors and send a consistent error response using the handleHttp function.
*/

describe('loginEstudianteHandler_function', () => {
	// Tests a valid login request for an estudiante.
	it('test_valid_estudiante_login', async () => {
		const req = {
			body: {
				carnet: '123456',
				pass: 'password',
			},
		};
		const res = {
			status: jest.fn().mockReturnThis(),
			json: jest.fn(),
		};
		const usuario = {
			getDataValue: jest.fn().mockReturnValue('password'),
			id_usuario: 1,
			cui: '123456789',
			nombre: 'John Doe',
			correo: 'johndoe@example.com',
		};
		const estudiante = {
			id_estudiante: 1,
		};
		const buscarUsuarioMock = jest.fn().mockReturnValue(usuario);
		const compararPasswordMock = jest.fn().mockReturnValue(true);
		const generarTokenMock = jest.fn().mockReturnValue('token');
		const findOneMock = jest.fn().mockReturnValue(estudiante);
		const originalBuscarUsuario = buscarUsuario;
		const originalCompararPassword = compararPassword;
		const originalGenerarToken = generarToken;
		const originalEstudianteFindOne = Estudiante.findOne;
		buscarUsuario = buscarUsuarioMock;
		compararPassword = compararPasswordMock;
		generarToken = generarTokenMock;
		Estudiante.findOne = findOneMock;

		await loginEstudianteHandler(req, res);

		expect(buscarUsuarioMock).toHaveBeenCalledWith({ carnet: '123456' });
		expect(compararPasswordMock).toHaveBeenCalledWith(
			'password',
			'password'
		);
		expect(findOneMock).toHaveBeenCalledWith({
			where: { id_estudiante: 1 },
		});
		expect(generarTokenMock).toHaveBeenCalledWith({
			carnet: '123456',
			cui: '123456789',
		});
		expect(res.status).toHaveBeenCalledWith(200);
		expect(res.json).toHaveBeenCalledWith({
			token: 'token',
			usuario: {
				nombre: 'John Doe',
				correo: 'johndoe@example.com',
				cui: '123456789',
			},
		});

		buscarUsuario = originalBuscarUsuario;
		compararPassword = originalCompararPassword;
		generarToken = originalGenerarToken;
		Estudiante.findOne = originalEstudianteFindOne;
	});

	// Tests an invalid login request with incorrect password.
	it('test_invalid_password', async () => {
		const req = {
			body: {
				carnet: '123456',
				pass: 'password',
			},
		};
		const res = {
			status: jest.fn().mockReturnThis(),
			json: jest.fn(),
		};
		const usuario = {
			getDataValue: jest.fn().mockReturnValue('wrongpassword'),
		};
		const buscarUsuarioMock = jest.fn().mockReturnValue(usuario);
		const compararPasswordMock = jest.fn().mockReturnValue(false);
		const originalBuscarUsuario = buscarUsuario;
		const originalCompararPassword = compararPassword;
		buscarUsuario = buscarUsuarioMock;
		compararPassword = compararPasswordMock;

		await loginEstudianteHandler(req, res);

		expect(buscarUsuarioMock).toHaveBeenCalledWith({ carnet: '123456' });
		expect(compararPasswordMock).toHaveBeenCalledWith(
			'password',
			'wrongpassword'
		);
		expect(res.status).toHaveBeenCalledWith(400);
		expect(res.json).toHaveBeenCalledWith({ msg: 'Contraseña incorrecta' });

		buscarUsuario = originalBuscarUsuario;
		compararPassword = originalCompararPassword;
	});

	// Tests an invalid login request with a nonexistent user.
	it('test_nonexistent_user', async () => {
		const req = {
			body: {
				carnet: '123456',
				pass: 'password',
			},
		};
		const res = {
			status: jest.fn().mockReturnThis(),
			json: jest.fn(),
		};
		const buscarUsuarioMock = jest.fn().mockReturnValue(null);
		const originalBuscarUsuario = buscarUsuario;
		buscarUsuario = buscarUsuarioMock;

		await loginEstudianteHandler(req, res);

		expect(buscarUsuarioMock).toHaveBeenCalledWith({ carnet: '123456' });
		expect(res.status).toHaveBeenCalledWith(400);
		expect(res.json).toHaveBeenCalledWith({ msg: 'El usuario no existe' });

		buscarUsuario = originalBuscarUsuario;
	});

	// Tests an invalid login request with a user that is not an estudiante.
	it('test_non_estudiante_user', async () => {
		const req = {
			body: {
				carnet: '123456789',
				pass: 'password',
			},
		};
		const res = {
			status: jest.fn().mockReturnThis(),
			json: jest.fn(),
		};
		const buscarUsuarioMock = jest
			.spyOn(authHandler, 'buscarUsuario')
			.mockResolvedValueOnce({
				getDataValue: jest.fn().mockReturnValueOnce('password'),
				id_usuario: 1,
			});
		const findOneMock = jest
			.spyOn(Estudiante, 'findOne')
			.mockResolvedValueOnce(null);

		await loginEstudianteHandler(req, res);

		expect(buscarUsuarioMock).toHaveBeenCalledWith({ carnet: '123456789' });
		expect(findOneMock).toHaveBeenCalledWith({
			where: { id_estudiante: 1 },
		});
		expect(res.status).toHaveBeenCalledWith(400);
		expect(res.json).toHaveBeenCalledWith({
			msg: 'El usuario no es estudiante',
		});

		buscarUsuarioMock.mockRestore();
		findOneMock.mockRestore();
	});

	// Tests an invalid login request with an invalid request body.
	it('test_invalid_request_body', async () => {
		const req = {
			body: {},
		};
		const res = {
			status: jest.fn().mockReturnThis(),
			json: jest.fn(),
		};

		await loginEstudianteHandler(req, res);

		expect(res.status).toHaveBeenCalledWith(400);
		expect(res.json).toHaveBeenCalledWith({ msg: 'El usuario no existe' });
	});

	// Tests an error scenario where the database query fails.
	it('test_database_error', async () => {
		const req = {
			body: {
				carnet: '123456789',
				pass: 'password',
			},
		};
		const res = {
			status: jest.fn().mockReturnThis(),
			json: jest.fn(),
		};
		const buscarUsuarioMock = jest
			.spyOn(authHandler, 'buscarUsuario')
			.mockRejectedValueOnce('Database error');

		await loginEstudianteHandler(req, res);

		expect(buscarUsuarioMock).toHaveBeenCalledWith({ carnet: '123456789' });
		expect(res.status).toHaveBeenCalledWith(500);
		expect(res.json).toHaveBeenCalledWith({
			message: 'Error al iniciar sesión',
		});

		buscarUsuarioMock.mockRestore();
	});
});
